
# Note to myself: This is a dictionary
# I can never remember the name sorry.
const TOKENS = {

    # MISC
    "EOF"               : "EOF",
    "ILLEGAL"           : "ILLEGAL",
    "COMMENT"           : "\#",
    "ESCAPE"            : "\\",
    "PERIOD"            : ".",
    "COMMA"             : ",",
    "COLON"             : ":",
    "SEMICOLON"         : ";",
    "QUESTION"          : "?",
    "L_BRACE"           : "{",
    "R_BRACE"           : "}",
    "L_PAREN"           : "(",
    "R_PAREN"           : ")",
    "L_BRACKET"         : "[",
    "R_BRACKET"         : "]",

    # Comparing
    "GRT"               : ">",          # CHECK IF GREATER THAN
    "GRT_EQUAL"         : ">=",         # CHECK IF GREATER THAN OR EQUAL TO
    "LES"               : "<",          # CHECK IF LESS    THAN
    "LES_EQUAL"         : "<=",         # CHECK IF LESS    THAN OR EQUAL TO
    "EQUAL_EQUAL"       : "==",         # CHECK IF SAME VALUE

    # Math & Bitwise
    "EQUAL"             : "=",
    "NOT_EQUAL"         : "!=",
    "PLUS"              : "+",          # ADD
    "PLUS_EQUAL"        : "+=",         # ADD      ASSIGN
    "PLUS_PLUS"         : "++",         # INCREMENT
    "MINUS"             : "-",          # SUB
    "MINUS_EQUAL"       : "-=",         # SUB      ASSIGN
    "MINUS_MINUS"       : "--",         # DECREMENT
    "STAR"              : "*",          # TIMES
    "STAR_EQUAL"        : "*=",         # TIMES    ASSIGN
    "STAR_STAR"         : "**",         # EXPONENT
    "STAR_STAR_EQUAL"   : "**=",        # EXPONENT ASSIGN
    "SLASH"             : "/",          # DIVIDE
    "SLASH_EQUAL"       : "/=",         # DIVIDE   ASSIGN
    "PERCENT"           : "%",          # MODULUS
    "PERCENT_EQUAL"     : "%=",         # MODULUS  ASSIGN

    # Other Bitwise
    "VBAR"              : "|",          # OR
    "VBAR_EQUAL"        : "|=",         # OR  ASSIGN
    "AMPERSAND"         : "&",          # AND
    "AMPERSAND_EQUAL"   : "&=",         # AND ASSIGN
    "EXCLAM"            : "!",          # NOT
    "EXCLAM_EQUAL"      : "!=",         # NOT ASSIGN
    "CARET"             : "^",          # XOR
    "CARET_EQUAL"       : "^=",         # XOR ASSIGN
    "L_SHIFT"           : "<<",         # LEFT  SHIFT
    "L_SHIFT_EQUAL"     : "<<=",        # LEFT  SHIFT ASSIGN
    "R_SHIFT"           : ">>",         # RIGHT SHIFT
    "R_SHIFT_EQUAL"     : ">>=",        # RIGHT SHIFT ASSIGN

    # List of keywords
    "KEYWORDS" = {

        # Importing
        "FROM"          : "from",
        "IMPORT"        : "import",
        "AS"            : "as",         # Import using an alias

        # Control flow
        "IF"            : "if",
        "ELSE"          : "else",
        "SWITCH"        : "switch",
        "CASE"          : "case",
        "DEFAULT"       : "default",

        # Looping
        "FOR"           : "for",
        "DO"            : "do",
        "WHILE"         : "while",
        "BREAK"         : "break",
        "CONTINUE"      : "continue",

        # Classes & Functions
        "SELF"          : "self",
        "NUM"           : "enum",
        "FUNC"          : "func",
        "PASS"          : "pass",
        "RETURN"        : "return",

        # Boolean
        "TRUE"          : "true",
        "FALSE"         : "false",
        "IS"            : "is",
        "OR"            : "or",
        "AND"           : "and",
        "NOT"           : "not",
        "XOR"           : "xor",

        # Variable handling
        "VOID"          : "void",
        "CONST"         : "const",
        "LOCAL"         : "local",      # Local  is the same as a "private" class, func, var, etc
        "GLOBAL"        : "global",     # Global is the same as a "public"  class, func, var, etc

        # Error handling
        "TRY"           : "try",
        "CATCH"         : "catch",
        "THROW"         : "throw",
        "ASSERT"        : "assert",

        # MISC
        "IN"            : "in",
        "TYPE"          : "type",
        "TYPEOF"        : "typeof",
        "ASYNC"         : "async",
        "AWAIT"         : "await"
    }
}

# Checks if the given string is a valid token
func is_token(tok: str) bool {
    if tok in TOKENS { return true  }
    else             { return false }
}

# 
func is_keyword(key: str) bool {
    if key in TOKENS.KEYWORDS { return true  } 
    else                      { return false }
}
